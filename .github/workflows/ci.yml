# This workflow will install Rust toolchain dependencies, build the workspace, run tests, build
# docs, run clippy, run rustfmt, and run benchmarks. Non-ignored tests are run on every CI trigger.
#
# Ignored tests depend on network and Ergast API availability, which could produce problematic
# spurious failures and exceed Ergast API rate limits if run on every CI trigger. However, get_*
# unit tests have solutions to mitigate instability caused by HTTP errors, and there are few enough
# tests that the Ergast API should not be greatly taxed. As such, the benefits of running these on
# every CI trigger, which include faster feedback and greater ease of local testing, outweigh the
# possible downsides, so ignored tests are run on every CI trigger as well.
#
# Benchmarks are built on every CI trigger, but they are only run on a nightly schedule to avoid
# taxing the Ergast API, because they are very time consuming, and because running them on GitHub's
# virtualized environment does not produce reliable results.
#
# @todo Executing benchmarks is currently disabled entirely due to jolpica-f1 API rate limiting.
# Need to find a way to do useful benchmarks without violating jolpica-f1's rate limits and ToU.
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "00 01 * * *"

env:
  CARGO_TERM_COLOR: always

  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build
        run: cargo build --workspace --all-features
      - name: Test (non-ignored)
        run: cargo test --workspace --all-features
      - name: Test (ignored)
        run: cargo test --workspace --all-features -- --ignored --test-threads 1

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - run: cargo doc --workspace --all-features --no-deps --document-private-items

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - run: cargo clippy --workspace --all-features --no-deps

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - run: cargo fmt --all -- --check

  code_coverage:
    runs-on: ubuntu-latest
    if: ${{ vars.SKIP_CODECOV != 'true' }}
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      - name: Run cargo-llvm-cov
        run: "cargo llvm-cov --codecov test --workspace --all-features -- \
          --include-ignored --test-threads 1 > codecove_code_coverage.json"
      - name: Archive codecove_code_coverage.json
        uses: actions/upload-artifact@v4
        with:
          path: codecove_code_coverage.json
      - name: Upload code coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build bench
        run: cargo bench --workspace --all-features --no-run
      - name: Run bench
        if: github.event_name == 'schedule' && false
        run: cargo bench --workspace --all-features
