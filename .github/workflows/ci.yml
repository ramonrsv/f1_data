# This workflow will install Rust toolchain dependencies, build the workspace, run tests (including
# ignored tests), build docs, run clippy, run rustfmt, run benchmarks, and generate code coverage
# reports and upload them to Codecov. It runs on push and pull_requests, and on a nightly schedule.
#
# Ignored tests depend on network and jolpica-f1 API availability, which could produce problematic
# spurious failures and exceed jolpica-f1 API rate limits if run on every CI trigger. However, get_*
# unit tests have rate limiting and solutions to mitigate instability caused by HTTP errors, and
# there are few enough tests that the jolpica-f1 API should not be greatly taxed. As such, the
# benefits of running these on every CI trigger, which include faster feedback and greater ease of
# local testing, outweigh the possible downsides, so ignored tests are run on every CI trigger.
#
# Benchmarks are built on every CI trigger, but they are only run on a nightly schedule to avoid
# taxing the jolpica-f1 API, because they are very time consuming, and because running them on
# GitHub's virtualized environment does not produce reliable results.
#
# Some variables can be used to control running the workflow locally with `act`. They can be passed
# via `--var <VAR_NAME>=<value>`, and are ignored when running on GitHub Actions. Supported vars:
#   - `SKIP_CODECOV=true` will skip the code coverage job, which uploads a report to Codecov.
#   - `RUN_BENCH=true` will run the benchmarks, which are otherwise only run on a nightly schedule.
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "00 01 * * *"

env:
  CARGO_TERM_COLOR: always

  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build
        run: cargo build --workspace --all-features
      - name: Test (non-ignored)
        run: cargo test --workspace --all-features
      - name: Test (ignored)
        run: cargo test --workspace --all-features -- --ignored --test-threads 1

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - run: cargo doc --workspace --all-features --no-deps --document-private-items
      - run: cargo doc --examples --no-deps

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - run: cargo clippy --workspace --all-features --no-deps

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - run: cargo fmt --all -- --check

  code_coverage:
    runs-on: ubuntu-latest
    if: vars.SKIP_CODECOV != 'true'
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      - name: Run cargo-llvm-cov
        run: "cargo llvm-cov --codecov test --workspace --all-features -- \
          --include-ignored --test-threads 1 > codecove_code_coverage.json"
      - name: Archive codecove_code_coverage.json
        uses: actions/upload-artifact@v4
        with:
          path: codecove_code_coverage.json
      - name: Upload code coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build benchmarks
        run: cargo bench --workspace --all-features --no-run
      - name: Run benchmarks
        if: vars.RUN_BENCH == 'true' || github.event_name == 'schedule'
        run: cargo bench --workspace --all-features
